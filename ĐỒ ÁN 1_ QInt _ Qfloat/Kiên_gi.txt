#include <iostream>
#include <conio.h>
#define _SIZE 4
using namespace std;

struct QInt
{
	int data[_SIZE];
	
};

//phép toán &, trên bit
QInt operator&(const QInt &num1, const QInt &num2)
{
	QInt result;

	for (int i = 0; i < _SIZE; i++)
	{
		result.data[i] = num1.data[i] & num2.data[i];
	}

	return result;
}

//phép toán |, trên bit
QInt operator|(const QInt &num1, const QInt &num2)
{
	QInt result;

	for (int i = 0; i < _SIZE; i++)
	{
		result.data[i] = num1.data[i] | num2.data[i];
	}

	return result;
}

//phép toán ^, trên bit
QInt operator^(const QInt &num1, const QInt &num2)
{
	QInt result;

	for (int i = 0; i < _SIZE; i++)
	{
		result.data[i] = num1.data[i] ^ num2.data[i];
	}

	return result;
}

//phép toán ~, trên bit
QInt operator~(const QInt &num)
{
	QInt result;
	for (int i = 0; i < _SIZE; i++)
	{
		result.data[i] = ~num.data[i];
	}

	return result;
}

//hàm bổ sung, kiểm tra số QInt có bằng 0 hay không
bool isEqualZero(QInt num)
{
	for (int i = 0; i < _SIZE; i++)
	{
		if (num.data[i] != 0)
		{
			return false;
		}
	}
	return true;
}

//toán tử +, nguồn tham khảo: https://vi.wikipedia.org/wiki/Ph%C3%A9p_to%C3%A1n_thao_t%C3%A1c_bit#D%E1%BB%8Bch_chuy%E1%BB%83n_lu%E1%BA%ADn_l%C3%BD
QInt operator+(QInt num1, QInt num2)
{
	QInt temp;

	while (!isEqualZero(num1))
	{
		temp = num2 & num1;
		num2 = num2 ^ num1;
		num1 = temp << 1;
	}
	return num2;
}

//toán tử -, tham khảo: https://www.geeksforgeeks.org/subtract-two-numbers-without-using-arithmetic-operators/
QInt operator-(QInt num1, QInt num2)
{
	QInt temp;

	while (!isEqualZero(num2))
	{
		temp = (~num1) & num2;
		num1 = num1 ^ num2;
		num2 = temp << 1;
	}
	return num1;
}

//opertemptor * củtemp QInt, làm theo thuật toán booth
//get, set lấy từ câu a,b
QInt operator*(const QInt &num1, const QInt &num2)
{
	int Q0 = 0;
	QInt temp;
	QInt M = num1;
	QInt Q = num2;
	int k = 127;
	while (k >= 0)
	{
		if (GetBit(Q, 127) == 1 && Q0 == 0)
		{
			temp = temp - M;
		}
		else if (GetBit(Q, 127) == 0 && Q0 == 1)
		{
			temp = temp + M;
		}
		//Shift right [temp,Q]
		Q0 = GetBit(Q, 127);
		Q = Q >> 1;
		SetBit(Q, 0);
		temp = temp >> 1;
		SetBit(temp, 0);
		k--;
	}
	return Q;
}